#!/usr/bin/perl

use strict;
use warnings;
use Net::GPSD3;
use Term::ReadKey;
use File::Slurp;
use Term::ANSIColor;
use IPC::System::Simple qw(system);
use JSON;
use HTTP::Tiny;

use lib './driver/scripts/';
use DriveUtils;

##############################################################################

# WARNING: Running this project in unsafe mode may be illegal, check your local
# laws to make sure you are complying. I am not responsible for misuse of this
# project.

##############################################################################

# Config
my $mode = extract_settings_from_config();
chomp($mode);
unless ($mode eq 'safe' || $mode eq 'unsafe') {
    Die("Invalid argument : $mode. Expected 'safe' or 'unsafe'.");
}
if ($mode eq 'unsafe') {
    if ($> != 0) {
        Die("This program must be run as root!");
    }
    print "Running this program in 'unsafe' mode may be viewed as unethical or even illegal without explicit permission.\nIf you understand the risks and want to continue anyway, enter 'Y': ";
    chomp(my $will_continue = <STDIN>);
    unless ($will_continue =~ /[yY]$/) {
        Die("Failed to accept the risks of unsafe mode.");
    }
}

# Teach the user how to pull up help menu while in app
print color('yellow'), "\nWelcome to justDrive. Press '?' to learn the commands of this app.\n\n", color('reset');

# my $interface = $ENV{'wAdapt'}; # Make sure this environment variable is set on your system! (Or just hardcode it in if you're one of THOSE people)
my $interface = 'wlo1'; # Used for testing without network adapter
Notice("Using interface: $interface");

print "Do you want to use a persistent or temporary log? (p/t): ";
chomp(my $choice = <STDIN>);
my $tmpLog = "/tmp/justDriveLog.txt";
my $persLog = "driver/data/justDriveLog.txt";
my $output_file;
if ($choice eq 'p') {
    $output_file = "$persLog";
} elsif ($choice eq 't') {
    $output_file = "$tmpLog";
} else {
    Die("Invalid choice. Enter 'p' for persistent or 't' for temporary.");
}
my $cap_dir = "driver/data/Captures"; 
my $scan_interval = $mode eq 'safe' ? 15 : 45;

# Init GPS
# Make this a check as to whether the service is even running
my $gps = Net::GPSD3->new;
Notice("Warning: Cannot connect to GPSD") unless $gps->poll;

# Main loop
unless (-e $output_file) {
    open my $create_file, '>', $output_file or Die("Cannot create log file: $!");
    close $create_file;
}
unless (-d $cap_dir) {
    eval {
        make_path($cap_dir) or Die("Cannot create directory for capture files: $!"); 
    }
}
my $old_mac = `ip link show $interface | grep ether | awk '{print $2}'`;
my $mac_needs_correction = 0;
if ($mode eq 'safe') {
    print color('green'), "Running in safe mode.\n", color('reset');
} else {
    print color('red'), "Running in unsafe mode.\n", color('reset');
    use DriveUtils qw(spoof_mac_address);
    $old_mac = spoof_mac_address();
    $mac_needs_correction = 1;
}
print color('blue'), "--------------------------------\n", color('reset');
print color('blue'), "Press SPACE to start scanning...\n", color('reset');
print color('blue'), "--------------------------------\n", color('reset');
while (1) {
    ReadMode 'cbreak';
    my $key = ReadKey(0);
    if (defined $key && $key eq ' ') {
        print color('green'), "\nScanning has been started...\n", color('reset');
        my $iter = 1;
        while (1) {
            $key = ReadKey(-1);
            if (defined $key && $key eq ' ') {
                print color('yellow'), "\nScanning has been stopped: ", color('reset'), "(press Space to resume or q to quit)...\n";
                last;
            }
            print color('blue'), "\nRound: $iter\n", color('reset');
            print "Getting GPS coordinates\n";
            my ($lat, $lon) = get_gps_coords($gps); # Change this to calculate the coords of the networks you try to connect to
            print "Scanning for networks...\n";
            my @networks = scan_networks($interface);
            if (@networks) {
                print "Extracting info from networks...\n";
                my @info = extract_info($mode, $cap_dir, $output_file, @networks);
                my $net_count = (scalar @info) / 3;
                print "$net_count new networks found\n";
                if ($net_count != 0) {
                    print "Logging data from networks...\n";
                    for (my $i = 0; $i < @info; $i += 3) {
                        unless (defined $lat && defined $lon) {
                            log_data("GPS Unavailable", $info[$i], $info[$i+1], $info[$i+2], $output_file);
                        } else {
                            log_data($lat, $lon, $info[$i], $info[$i+1], $info[$i+2], $output_file);
                        }
                    }
                } else {
                    print "No new data to log.\n";
                }
            } else {
                Failure("Unable to scan for networks, waiting until next cycle to scan...");
            }
            sleep $scan_interval;
            $iter++;
        }
    } elsif (defined $key && $key eq 'h') {
        my $url = "http://localhost:7580";
        my $endpoint = "$url/heatmap-data";
        print "Heat map generation coming soon.\n";
        my $tmpLogExists = -e "$tmpLog" ? 1 : 0;
        my $persLogExists = -e "$persLog" ? 1 : 0;
        if ($tmpLogExists) {
            print "Log file found at $tmpLog\n";
        }
        if ($persLogExists) {
            print "Log file found at $persLog\n";
        }
        my @files;
        my $tempErr = "There is no data in the temporary log. Time to go driving!";
        my $persErr = "There is no data in the persistent log. Time to go driving!";
        if ($tmpLogExists && $persLogExists) {
            print "Which of the log files would you like to use for the heat map?\n't' for tmp\n'p' for persistent\n'b' for both\nChoose: ";
            chomp(my $choice = <STDIN>);
            if ($choice eq 'b') {
                unless (file_has_data($tmpLog)) {
                    Die($tempErr);
                }
                unless (file_has_data($persLog)) {
                    Die($persErr);
                }
                push @files, ("$tmpLog", "$persLog");
            } elsif ($choice eq 'p') {
                unless (file_has_data($persLog)) {
                    Die($persErr);
                }
                push @files, ("$persLog");
            } elsif ($choice eq 't') {
                unless (file_has_data($tmpLog)) {
                    Die($tempErr);
                }
                push @files, ("$tmpLog");
            } else {
                Die("Invalid choice. Must choose 't', 'p', or 'b'.");
            }
        } elsif ($persLogExists) {
            unless (file_has_data($persLog)) {
                Die($persErr);
            }
            push @files, ("$persLog");
        } elsif ($tmpLogExists) {
            unless (file_has_data($tmpLog)) {
                Die($tempErr);
            }
            push @files, ("$tmpLog");
        } else {
            Die("There are no existing log files to use for heat map generation...");
        }
        my @data;
        foreach my $file (@files) {
            open my $fh, '<', $file or Die("Cannot open file $file: $!");
            while (my $line = <$fh>) {
                chomp($line);
                push @data, $line;
            }
            close $fh;
        }
        my $json = encode_json(\@data);
        my $http = HTTP::Tiny->new;
        my $response = $http->post(
            $endpoint,
            {
                headers => {'Content-Type' => 'application/json'},
                content => $json,
            }
        );
        print "Content: $response->{content}";
        if ($response->{success}) {
            print "Heatmap data has been sent to the web page.";
        } else {
            Die("Failed to post data to $endpoint: $response->{status} $response->{reason}");
        }
        print "To access the heat map visit http://localhost:7580\n";
    } elsif (defined $key && $key eq '?') {
        print <<'END_SCRIPT_HELP';

########################################### HELP MENU #########################################################
If the program is in the middle of a scan, the motions will not be executed until it finishes!

Motions:
    Space   ->      Start or stop the script (If pressed during a round, it will pause once the round finishes)
    h       ->      Generate a heat map from the collected data
    ?       ->      Display help menu
    q       ->      Quit the program
###############################################################################################################
END_SCRIPT_HELP
    }
    last if defined $key && $key eq 'q';
}
ReadMode 'normal';
if ($mac_needs_correction) {
    use DriveUtils qw(fix_mac_address);
    fix_mac_address($old_mac);
}
print "Exiting...\n";
